@page "/"

@inject NavigationManager NavigationManager

@implements IDisposable

@switch(_GameState)
{
    case GameState.Login:
        <Login @ref="_Login" OnChangePlayerInfo="ChangePlayerInfo" OnCreateLobby="CreateLobby" OnJoinLobby="JoinLobby" />
        break;
    case GameState.Lobby:
        <Lobby LobbyID="@_LobbyID" PlayerList="_Playerlist" OnGameStart="StartGame" Messages="_Messages" OnNewMessage="SendMessage"/>
        break;
    case GameState.Guessing:
        <Guess LobbyID="@_LobbyID" PlayerList="_Playerlist" Messages="_Messages" OnNewMessage="SendMessage" DisplayWord="@_Displayword" Drawing="@_Drawing" DurationProgress="_TurnProgress" TurnDuration="_TurnDuration"/>
        break;
    case GameState.Drawing:
        <DrawingBoard @ref="_DrawingBoard" LobbyID="@_LobbyID" PlayerList="_Playerlist" Messages="_Messages" OnNewMessage="SendMessage" DisplayWord="@_Displayword" DurationProgress="_TurnProgress" TurnDuration="_TurnDuration" OnDrawUpdate="SendDrawing" WordChoice="_WordChoice" OnWordSelected="SetWordChoice" />
        break;
}

<MudMessageBox @ref="_Score" Title="Score" YesText="Ok">
    <MessageContent>
        <TurnResult Players="_Playerlist"/>
    </MessageContent>
</MudMessageBox>

<MudMessageBox @ref="_End" Title="Game Over" YesText="Ok">
    <MessageContent>
        <EndResult Players="_Playerlist"/>
    </MessageContent>
</MudMessageBox>

@code
{
    private GameState _GameState;
    private bool _ShowNext;
    private bool _DrawingWasSend;
    private int _TurnDuration;
    private int _TurnProgress;
    private int _WordLength;
    private int _RevealSteps;
    private string _LobbyID;
    private string _Drawing;
    private string _Displayword;
    private string _Result;
    private System.Timers.Timer _Timer;
    private List<string> _WordChoice;
    private List<ScoreCardInfo> _Playerlist;
    private List<MessageCardInfo> _Messages;

    private HubConnection _Hub;

    private Login _Login;
    private MudMessageBox _Score;
    private MudMessageBox _End;
    private DrawingBoard _DrawingBoard;

    protected override async Task OnInitializedAsync()
    {
        _GameState = GameState.Login;
        _Timer = new(1000);
        _Timer.Elapsed += (x, e) => CountDown();
        _Playerlist = new();
        _Messages = new();

        _Hub = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/lobbyHub"))
                                         .Build();

        _Hub.On<string>("LobbyID", lobbyID =>
        {
            _LobbyID = lobbyID;
            StateHasChanged();
        });

        _Hub.On("StartManaging", () =>
        {
            _GameState = GameState.Lobby;
            StateHasChanged();
        });

        _Hub.On("StartGuessing", () =>
        {
            _GameState = GameState.Guessing;
            _Drawing = Properties.Resources.EmptyCanvas;
            StateHasChanged();
        });

        _Hub.On<List<string>>("StartDrawing", (words) =>
        {
            _WordChoice = words;
            _GameState = GameState.Drawing;
            StateHasChanged();
        });

        _Hub.On<List<ScoreCardInfo>>("UpdatePlayerList", players =>
        {
            _Playerlist = players;
            StateHasChanged();
        });

        _Hub.On<MessageInfo>("MessageFromSelf", message =>
        {
            _Messages.Add(new MessageCardInfo()
            {
                Type = MessageType.Self,
                MessageInfo = message
            });

            StateHasChanged();
        });

        _Hub.On<MessageInfo>("MessageFromOther", message =>
        {
            _Messages.Add(new MessageCardInfo()
            {
                Type = MessageType.Other,
                MessageInfo = message
            });

            StateHasChanged();
        });

        _Hub.On<PlayerInfo>("Connected", player =>
        {
            _Messages.Add(new MessageCardInfo()
            {
                Type = MessageType.System,
                MessageInfo = new MessageInfo()
                {
                    Message = $"{player.Name} has joined the game."
                }
            });

            StateHasChanged();
        });

        _Hub.On<PlayerInfo>("Disconnected", player =>
        {
            _Messages.Add(new MessageCardInfo()
            {
                Type = MessageType.System,
                MessageInfo = new MessageInfo()
                {
                    Message = $"{player.Name} has left the game."
                }
            });

            StateHasChanged();
        });

        _Hub.On<string>("UpdateDrawing", drawing =>
        {
            _Drawing = drawing;
            StateHasChanged();
        });

        _Hub.On<string>("UpdateDisplayWord", word =>
        {
            string result = string.Empty;
            foreach(char x in word)
            {
                result += x;
                result += "⠀";
            }
            _Displayword = result;
            StateHasChanged();
        });

        _Hub.On<string>("GuessedCorrectly", (guess) =>
        {
            _Messages.Add(new MessageCardInfo()
            {
                Type = MessageType.System,
                MessageInfo = new MessageInfo()
                {
                    Message = $"{guess} is correct."
                }
            });

            StateHasChanged();
        });

        _Hub.On<string>("ShowTurnResult", (word) =>
        {
            _Score.Close();
            _Timer.Stop();
            _Timer.Enabled = false;
            _ShowNext = false;
            _Score.Title = $"{word} was the correct answer";
            _Score.Show();
            StateHasChanged();
        });

        _Hub.On<string>("SysMessage", message =>
        {
            _Messages.Add(new MessageCardInfo()
            {
                Type = MessageType.System,
                MessageInfo = new MessageInfo()
                {
                    Message = message
                }
            });

            StateHasChanged();
        });

        _Hub.On("ShowEndResult", () =>
        {
            _Score.Close();
            _End.Show(new DialogOptions()
            {
                DisableBackdropClick = true
            });
            StateHasChanged();
        });

        _Hub.On<int>("StartTimer", duration =>
        {
            _Timer.Enabled = true;
            _ShowNext = true;
            _TurnDuration = duration;
            _TurnProgress = duration;
            _Timer.Start();
            StateHasChanged();
        });

        await _Hub.StartAsync();

        await base.OnInitializedAsync();
    }

    private async void ChangePlayerInfo(PlayerInfo playerInfo) => await _Hub.InvokeAsync("SetPlayerInfo", playerInfo);

    private async void CreateLobby() => await _Hub.InvokeAsync("CreateLobby");

    private async void JoinLobby(string lobbyID)
    {
        bool connected = await _Hub.InvokeAsync<bool>("JoinLobby", lobbyID);
        if(!connected)
            _Login.CannotConnectToLobby();
    }

    private async void StartGame(RoundInfo roundInfo) => await _Hub.InvokeAsync("StartGame", roundInfo);

    private async void SendMessage(string message) => await _Hub.InvokeAsync("SendMessage", message);

    private async void SendDrawing(string drawing)
    {
        _DrawingWasSend = true;
        await _Hub.InvokeAsync("UpdateDrawing", drawing);
    }

    private async void SetWordChoice(string word)
    {
        _WordLength = word.Length;
        _RevealSteps = Math.Max( _TurnDuration / ((_WordLength / 2) + 1), 5);
        await _Hub.InvokeAsync("SetWordChoice", word);
    }

    private async void CountDown()
    {
        if(_TurnProgress > 0)
        {
            _TurnProgress--;

            if(_GameState == GameState.Drawing)
            {
                if(_RevealSteps > 0)
                {
                    _RevealSteps--;
                }
                else
                {
                    if(_ShowNext)
                        await _Hub.InvokeAsync("ShowNextDisplayChar");
                    _RevealSteps = _TurnDuration / ((_WordLength / 2) + 1);
                }

                if(_DrawingWasSend)
                {
                    _DrawingWasSend = false;
                }
                else
                {
                    if(_DrawingBoard is not null)
                    {
                        string drawing =  await _DrawingBoard.GetDrawing();
                        await _Hub.InvokeAsync("UpdateDrawing", drawing);
                    }
                }
            }
        }
        else
        {
            _Timer.Stop();

            if(_GameState == GameState.Drawing)
            {
                await _Hub.InvokeAsync("EndTurn");
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _Timer.Dispose();
    }
}